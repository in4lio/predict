
/*  data-vote.h was generated by yup.py (yupp) 0.9b3
    out of data-vote.yu-h 
 *//**
 *  \file  data-vote.h (data-vote.yu-h)
 *  \brief  Data voting.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#define LOGGING
#define LINK_CONSOLE

#define LINK_UT

#define LINK_UT_UT
#define LINK_UT_CORO
#define LINK_UT_DATA

#ifndef DATA_VOTE_H
#define DATA_VOTE_H

#ifdef  DATA_VOTE_IMPLEMENT
#define DATA_VOTE_EXT
#define DATA_VOTE_EXT_INIT( dec, init ) \
	dec = init
#define DATA_VOTE_INL
#else
#define DATA_VOTE_EXT extern
#define DATA_VOTE_EXT_INIT( dec, init ) \
	extern dec
#if __GNUC__ && !__GNUC_STDC_INLINE__
#define DATA_VOTE_INL extern inline
#else
#define DATA_VOTE_INL inline
#endif
#endif

#ifndef COMMA
#define COMMA   ,
#endif

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  \addtogroup data
 *  \{
 */

/**
 *  \brief Voting of dword values (on exact matching).
 *  \param result Voted value pointer.
 *  \param valid_1 Validity flag of 1st channel.
 *  \param value_1 Value of 1st channel.
 *  \param valid_2 Validity flag of 2nd channel.
 *  \param value_2 Value of 2nd channel.
 *  \param valid_3 Validity flag of 3th channel.
 *  \param value_3 Value of 3th channel.
 *  \return Validity flag of majority opinion.
 */
DATA_VOTE_EXT bool vote_dword( dword *result, bool valid_1, dword value_1, bool valid_2, dword value_2, bool valid_3, dword value_3 );

/**
 *  \brief Voting of word values (on exact matching).
 *  \param result Voted value pointer.
 *  \param valid_1 Validity flag of 1st channel.
 *  \param value_1 Value of 1st channel.
 *  \param valid_2 Validity flag of 2nd channel.
 *  \param value_2 Value of 2nd channel.
 *  \param valid_3 Validity flag of 3th channel.
 *  \param value_3 Value of 3th channel.
 *  \return Validity flag of majority opinion.
 */
DATA_VOTE_EXT bool vote_word( word *result, bool valid_1, word value_1, bool valid_2, word value_2, bool valid_3, word value_3 );

/**
 *  \brief Voting of byte values (on exact matching).
 *  \param result Voted value pointer.
 *  \param valid_1 Validity flag of 1st channel.
 *  \param value_1 Value of 1st channel.
 *  \param valid_2 Validity flag of 2nd channel.
 *  \param value_2 Value of 2nd channel.
 *  \param valid_3 Validity flag of 3th channel.
 *  \param value_3 Value of 3th channel.
 *  \return Validity flag of majority opinion.
 */
DATA_VOTE_EXT bool vote_byte( byte *result, bool valid_1, byte value_1, bool valid_2, byte value_2, bool valid_3, byte value_3 );

/**
 *  \brief Voting of dword values (bit-by-bit).
 *  \param result Voted value pointer.
 *  \param _1 (unused)
 *  \param value_1 Value of 1st channel.
 *  \param _2 (unused)
 *  \param value_2 Value of 2nd channel.
 *  \param _3 (unused)
 *  \param value_3 Value of 3th channel.
 *  \return true.
 */
DATA_VOTE_EXT bool vote_bit_dword( dword *result, bool _1, dword value_1, bool _2, dword value_2, bool _3, dword value_3 );
;

/** \} */

#ifdef __cplusplus
}
#endif

#endif

