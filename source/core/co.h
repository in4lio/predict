
/*  co.h was generated by yup.py (yupp) 1.0c2
    out of co.yu-h 
 *//**
 *  \file  co.h (co.yu-h)
 *  \brief  Coroutines and unit tests declarations.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#define LOGGING
#define LINK_CONSOLE

#define LINK_UT

#define LINK_UT_UT
#define LINK_UT_CORO
#define LINK_UT_DATA

#ifndef CO_H
#define CO_H

#ifdef  CO_IMPLEMENT
#define CO_EXT
#define CO_INIT( ... ) \
	= __VA_ARGS__

#ifdef __cplusplus
#define CO_EXT_C \
	extern "C"
#else
#define CO_EXT_C \
	extern
#endif

#define CO_VAR( decl ) \
	decl
#define CO_VAR_INIT( decl, ... ) \
	decl = __VA_ARGS__

#ifdef __cplusplus
#define CO_VAR_C( decl ) \
	extern "C" decl; decl
#define CO_VAR_C_INIT( decl, ... ) \
	extern "C" decl; decl = __VA_ARGS__
#else
#define CO_VAR_C( decl ) \
	decl
#define CO_VAR_C_INIT( decl, ... ) \
	decl = __VA_ARGS__
#endif

#define CO_INL

#else  /* CO_IMPLEMENT */
#define CO_EXT \
	extern
#define CO_INIT( ... )

#ifdef __cplusplus
#define CO_EXT_C \
	extern "C"
#else
#define CO_EXT_C \
	extern
#endif

#define CO_VAR( decl ) \
	extern decl
#define CO_VAR_INIT( decl, ... ) \
	extern decl

#ifdef __cplusplus
#define CO_VAR_C( decl ) \
	extern "C" decl
#define CO_VAR_C_INIT( decl, ... ) \
	extern "C" decl
#else
#define CO_VAR_C( decl ) \
	extern decl
#define CO_VAR_C_INIT( decl, ... ) \
	extern decl
#endif

#if __GNUC__ && !__GNUC_STDC_INLINE__
#define CO_INL \
	extern inline
#else
#define CO_INL \
	inline
#endif

#endif /* CO_IMPLEMENT */

typedef void * co_t;
typedef unsigned int semaphore_t;

enum {
	CO_READY,
	CO_WAIT,
	CO_YIELD,
	CO_END,
	CO_SKIP,
};

/**
 *  \defgroup coro Coroutines.
 *  \ingroup core
 *  \{
 */

/**
 *  \page coro List of coroutines
 *
 *  \section t_receive_char receive_char
 *  Coroutine of message receiving on debug interface.
 *
 *  \section t_console console
 *  Coroutine of debug console.
 *
 *  \section t_console_cyclic console_cyclic
 *  Coroutine of cyclic console commands.
 *
 *  \section t_ut_2 ut_2
 *  Coroutine of unit testing of 2nd stage.
 */

/** "receive_char" coroutine local context. */
CO_VAR_C_INIT( co_t co_receive_char, NULL );
/** "receive_char" coroutine alive flag. */
CO_VAR_C_INIT( int receive_char_alive, CO_SKIP );
/** "receive_char" coroutine. */
CO_EXT_C int coro_receive_char( co_t *co_p );
/** Initialize "receive_char" coroutine. */
CO_EXT_C int receive_char_init( void );
/** Uninitialize "receive_char" coroutine. */
CO_EXT_C void receive_char_uninit( void );
/** "console" coroutine local context. */
CO_VAR_C_INIT( co_t co_console, NULL );
/** "console" coroutine alive flag. */
CO_VAR_C_INIT( int console_alive, CO_SKIP );
/** "console" coroutine. */
CO_EXT_C int coro_console( co_t *co_p );
/** Initialize "console" coroutine. */
CO_EXT_C int console_init( void );
/** Uninitialize "console" coroutine. */
CO_EXT_C void console_uninit( void );
/** "console_cyclic" coroutine local context. */
CO_VAR_C_INIT( co_t co_console_cyclic, NULL );
/** "console_cyclic" coroutine alive flag. */
CO_VAR_C_INIT( int console_cyclic_alive, CO_SKIP );
/** "console_cyclic" coroutine. */
CO_EXT_C int coro_console_cyclic( co_t *co_p );
/** Initialize "console_cyclic" coroutine. */
CO_EXT_C int console_cyclic_init( void );
/** Uninitialize "console_cyclic" coroutine. */
CO_EXT_C void console_cyclic_uninit( void );
/** "ut_2" coroutine local context. */
CO_VAR_C_INIT( co_t co_ut_2, NULL );
/** "ut_2" coroutine alive flag. */
CO_VAR_C_INIT( int ut_2_alive, CO_SKIP );
/** "ut_2" coroutine. */
CO_EXT_C int coro_ut_2( co_t *co_p );
/** Initialize "ut_2" coroutine. */
CO_EXT_C int ut_2_init( void );
/** Uninitialize "ut_2" coroutine. */
CO_EXT_C void ut_2_uninit( void );

/** \} */

#ifdef LINK_UT

/**
 *  \addtogroup ut
 *  \{
 */

/**
 * \brief Restart unit testing of 2nd stage.
 */
CO_EXT_C void ut_2_restart( void );

/** "ut_ut" unit test of 1st stage. */
CO_EXT_C void ut_ut( void );
/** "ut_data" unit test of 1st stage. */
CO_EXT_C void ut_data( void );

/** "ut_coro" test coroutine alive flag. */
CO_EXT_C int ut_coro_alive;
/** "ut_data" test coroutine alive flag. */
CO_EXT_C int ut_data_alive;

/** \} */

#endif /* LINK_UT */

#undef CO_EXT
#undef CO_INIT
#undef CO_EXT_C
#undef CO_VAR
#undef CO_VAR_INIT
#undef CO_VAR_C
#undef CO_VAR_C_INIT
#undef CO_INL
#endif

