
/*  char.h was generated by yup.py (yupp) 1.0b6
    out of char.yu-h 
 *//**
 *  \file  char.h (char.yu-h)
 *  \brief  Debug interface.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#define LOGGING
#define LINK_CONSOLE

#define LINK_UT

#define LINK_UT_UT
#define LINK_UT_CORO
#define LINK_UT_DATA

#ifndef CHAR_H
#define CHAR_H

#ifdef  CHAR_IMPLEMENT
#define CHAR_EXT
#define CHAR_EXT_INIT( dec, init ) \
	dec = init
#define CHAR_EXT_C
#define CHAR_EXT_C_INIT( dec, init ) \
	dec = init
#define CHAR_INL
#else
#define CHAR_EXT extern
#define CHAR_EXT_INIT( dec, init ) \
	extern dec
#ifdef __cplusplus
#define CHAR_C "C"
#else
#define CHAR_C
#endif
#define CHAR_EXT_C extern CHAR_C
#define CHAR_EXT_C_INIT( dec, init ) \
	extern CHAR_C dec
#if __GNUC__ && !__GNUC_STDC_INLINE__
#define CHAR_INL extern inline
#else
#define CHAR_INL inline
#endif
#endif

#ifndef COMMA
#define COMMA ,
#endif

#ifdef LINK_CONSOLE

/**
 *  \defgroup char Debug interface
 *  \ingroup console
 *  \{
 */

#define ESCSEQ_INSIDE  0  /**< Inside of escape sequence. \hideinitializer */
#define ESCSEQ_1       1  /**< Single character. \hideinitializer */
#define ESCSEQ_OK      2  /**< Last character of escape sequence. \hideinitializer */

#define RX_SIZE  80  /**< Size of input buffer. \hideinitializer */

/**
 *  \brief Received message pointer.
 *  \note Must be reset in NULL after message handling.
 */
CHAR_EXT_C char *char_received;

/**
 *  \brief Flag of displaying of received characters.
 */
CHAR_EXT_C int char_echo;

/**
 *  \brief Clear input message.
 */
CHAR_EXT_C void char_clear_input( void );

/**
 *  \brief Print data in hex format.
 *  \param data Data pointer.
 *  \param len Data length.
 */
CHAR_EXT_C void printh( byte *data, uint32_t len );

/**
 *  \brief Print data in hex format by columns.
 *  \param data Data pointer.
 *  \param len Data length.
 *  \param cols Columns count.
 */
CHAR_EXT_C void printhr( byte *data, uint32_t len, uint32_t cols );

/**
 *  \brief Print program version.
 */
CHAR_EXT_C void print_version( void );

/** \} */

#endif /* LINK_CONSOLE */

/**
 *  \brief Flush output.
 */
extern void flush( void );

/**
 *  \brief Print message.
 *  \param PRE Message type.
 *  \param FORMAT Message format.
 *  \param ... Message arguments.
 *  \hideinitializer
 */
#define __echo( PRE, FORMAT, ... ) do { \
	printf( __CRLF__ "*** " PRE " *** %s() %s (%d)" __CRLF__ "    " FORMAT, \
	__FUNCTION__, __FILE__, __LINE__, ## __VA_ARGS__ ); \
} while ( 0 )

/**
 *  \brief Print message about function call.
 *  \param FORMAT Message format.
 *  \param ... Message arguments.
 *  \hideinitializer
 */
#define __echo_call( FORMAT, ... ) __echo( "CALL", FORMAT, ## __VA_ARGS__ )

/**
 *  \brief Print debug message.
 *  \param FORMAT Message format.
 *  \param ... Message arguments.
 *  \hideinitializer
 */
#define __echo_debug( FORMAT, ... ) __echo( "INFO", FORMAT, ## __VA_ARGS__ )

/**
 *  \brief Print warning.
 *  \param FORMAT Message format.
 *  \param ... Message arguments.
 *  \hideinitializer
 */
#define __echo_warn( FORMAT, ... ) do { \
	__echo( "WARN", ); \
	printf( FORMAT, ## __VA_ARGS__ ); \
	flush(); \
} while ( 0 )

/**
 *  \brief Print error.
 *  \param FORMAT Message format.
 *  \param err Error number.
 *  \param ... Message arguments.
 *  \hideinitializer
 */
#define __echo_error( FORMAT, err, ... ) do { \
	__echo( "ERROR #%X", COMMA err ); \
	printf( FORMAT, ## __VA_ARGS__ ); \
	flush(); \
} while ( 0 )

/**
 *  \brief Console width.
 */
CHAR_EXT_C_INIT( int console_col_count, 80 );

/**
 *  \brief Console height.
 */
CHAR_EXT_C_INIT( int console_row_count, 25 );

#undef CHAR_EXT
#undef CHAR_EXT_INIT
#undef CHAR_EXT_C
#undef CHAR_EXT_C_INIT
#undef CHAR_INL
#undef CHAR_C
#endif

