
/*  console.h was generated by yup.py (yupp) 1.0c2
    out of console.yu-h 
 *//**
 *  \file  console.h (console.yu-h)
 *  \brief  Debug console.
 *  \author  Vitaly Kravtsov (in4lio@gmail.com)
 *  \copyright  See the LICENSE file.
 */

#define LOGGING
#define LINK_CONSOLE

#define LINK_UT

#define LINK_UT_UT
#define LINK_UT_CORO
#define LINK_UT_DATA

#ifndef CONSOLE_H
#define CONSOLE_H

#ifdef  CONSOLE_IMPLEMENT
#define CONSOLE_EXT
#define CONSOLE_INIT( ... ) \
	= __VA_ARGS__

#ifdef __cplusplus
#define CONSOLE_EXT_C \
	extern "C"
#else
#define CONSOLE_EXT_C \
	extern
#endif

#define CONSOLE_VAR( decl ) \
	decl
#define CONSOLE_VAR_INIT( decl, ... ) \
	decl = __VA_ARGS__

#ifdef __cplusplus
#define CONSOLE_VAR_C( decl ) \
	extern "C" decl; decl
#define CONSOLE_VAR_C_INIT( decl, ... ) \
	extern "C" decl; decl = __VA_ARGS__
#else
#define CONSOLE_VAR_C( decl ) \
	decl
#define CONSOLE_VAR_C_INIT( decl, ... ) \
	decl = __VA_ARGS__
#endif

#define CONSOLE_INL

#else  /* CONSOLE_IMPLEMENT */
#define CONSOLE_EXT \
	extern
#define CONSOLE_INIT( ... )

#ifdef __cplusplus
#define CONSOLE_EXT_C \
	extern "C"
#else
#define CONSOLE_EXT_C \
	extern
#endif

#define CONSOLE_VAR( decl ) \
	extern decl
#define CONSOLE_VAR_INIT( decl, ... ) \
	extern decl

#ifdef __cplusplus
#define CONSOLE_VAR_C( decl ) \
	extern "C" decl
#define CONSOLE_VAR_C_INIT( decl, ... ) \
	extern "C" decl
#else
#define CONSOLE_VAR_C( decl ) \
	extern decl
#define CONSOLE_VAR_C_INIT( decl, ... ) \
	extern decl
#endif

#if __GNUC__ && !__GNUC_STDC_INLINE__
#define CONSOLE_INL \
	extern inline
#else
#define CONSOLE_INL \
	inline
#endif

#endif /* CONSOLE_IMPLEMENT */

#ifdef LINK_CONSOLE

/**
 *  \defgroup console Debug console.
 *  \ingroup core
 *
 *	Structure of <b>console-dict.yu</b> file:
 *
 *  <b>CONSOLE_CMD</b> - Dictionary of console commands.
 *  \param CONSOLE_CMD Console command.
 *  \param CMD_PAR_N Command parameters count.
 *  \param CMD_CYCLIC Cyclic command flag.
 *  \{
 */

/**
 *  \brief Command line prompt.
 *  \hideinitializer
 */
#define CONSOLE_PROMPT       "$"

/**
 *  \brief Command line prompt in case of selecting command from list.
 *  \hideinitializer
 */
#define CONSOLE_PROMPT_LIST  "#"

/**
 *  \page console Console commands
 *  <br><i>Common console commands</i><br>
 *
 *  \section c__delay _delay
 *  Interval of cyclic command execution.
 *
 *  \section c_data data
 *  Application state-space representation.
 *  \code
 *  data s -s
 *  s     - filter: substring (s) is contained in variable name
 *  -s    - filter: substring (s) is absent in variable name
 *  \endcode
 *
 *  \section c_d_flt d_flt
 *  Filter of state changing protocol.
 *  \code
 *  d_flt s -s * -
 *  s     - substring (s) is contained in variable name
 *  -s    - substring (s) is absent in variable name
 *  *     - reset "substring is contained" filter
 *  -     - reset "substring is absent" filter
 *  \endcode
 *
 *  \section c_d_get d_get
 *  Get value of state variable.
 *
 *  \section c_d_list d_list
 *  List of state variables, see \ref c_data "data".
 *  \code
 *  d_list s -s
 *  \endcode
 *
 *  \section c_d_prot d_prot
 *  Display state changing protocol.
 *
 *  \section c_d_set d_set
 *  Set value of state variable.
 *
 *  \section c_help help
 *  List of console commands.
 *
 *  \section c_ini ini
 *  Save program settings.
 *
 *  \section c_quit quit
 *  Quit program.
 *
 *  \section c_stop stop
 *  Stop cyclic command execution.
 *
 *  \section c_time time
 *  Current time.
 *  \code
 *  time 1
 *  1     - display once;
 *  \endcode
 *
 *  \section c_ut ut
 *  Restart unit testing of 2nd stage.
 *
 *  \section c_u_result u_result
 *  Unit testing result.
 *
 *  \section c_version version
 *  Program version.
 */

/**
 *  \brief Console commands count.
 */
#define CONSOLE_COMMAND_COUNT  (15 + 1 )

/**
 *  \brief List of console commands.
 */
CONSOLE_EXT_C const char *const console_command[];

/**
 *  \brief Index of selected from list command.
 */
CONSOLE_VAR_C( int console_index );

#define cyclic_delay_MIN  1
#define cyclic_delay_MAX  600

/**
 *  \brief Print prompt.
 */
CONSOLE_EXT_C void console_prompt( void );

/**
 *  \brief Check console is waiting for command.
 */
CONSOLE_EXT_C bool console_command_waited( void );

/** \} */

#endif /* LINK_CONSOLE */

#undef CONSOLE_EXT
#undef CONSOLE_INIT
#undef CONSOLE_EXT_C
#undef CONSOLE_VAR
#undef CONSOLE_VAR_INIT
#undef CONSOLE_VAR_C
#undef CONSOLE_VAR_C_INIT
#undef CONSOLE_INL
#endif

