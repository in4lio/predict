($!                _ _     _
     ___ ___ ___ _| |_|___| |_
    |   |  _   _|   | |  _   _|
    |  _|_| |___ ___|_|___  |
    |_|                   |_)

($import "core.yu")
($TITLE,,Unit test of coroutines.)

($import stdlib)
($import corolib)
($import "config.yu")

#include "include.h"

($skip-if-not LINK_UT_CORO)

/**
 *  \defgroup ut_coro Unit test of coroutines
 *  \ingroup ut
 *  \{
 */

#define CYCLE_COUNT  1024

#define B_SIZE  8
static int buf[ B_SIZE ];
static int pos = 0;

static semaphore_t b_full, b_empty;

static int answer = 0;
static int answer_last = 0;

static int inside_test_3;

static void b_set( int mark )
{
	buf[ pos ] = mark;
	pos = ( pos + 1 ) % B_SIZE;
}

static int b_get( void )
{
	int mark = buf[ pos ];
	pos = ( pos + 1 ) % B_SIZE;

	return mark;
}

static int create_mark( void )
{
	static int mark = 0;

	return mark++;
}

static void check_mark( int mark )
{
	assert_int_eq( answer++, mark, );
}

int test_1_init( void )
{
	return ( CO_READY ); /* CO_SKIP */
}

($coro-define test_1 ]
	for ( i = 0; i < CYCLE_COUNT; i++ ) {
		($semaphore-acquire b_full);

		b_set( create_mark());

		($semaphore-release b_empty);
	}
[ \enter ]
	($coro-local) int i;
[ )

int test_2_init( void )
{
	return ( CO_READY ); /* CO_SKIP */
}

($coro-define test_2 ]
	for ( i = 0; i < CYCLE_COUNT; i++ ) {
		($semaphore-acquire b_empty);

		check_mark( b_get());

		($semaphore-release b_full);
	}
[ \enter ]
	($coro-local) int i;
[ )

int test_3_init( void )
{
	inside_test_3 = 0;

	return ( CO_READY ); /* CO_SKIP */
}

($coro-define test_3 ]
	switch ( i ) {

	case 1:
		i = 2;
		($coro-yield);
		assert_int_eq( 2, i, );

		i = 3;
		($coro-yield);
		assert_int_eq( 3, i, );

		i = 4;
		($coro-yield);
		assert_int_eq( 4, i, );

		($coro-wait,, ++i < 10);
		for ( ; i < 20; i++ ) {
			($coro-yield);
		}
		assert_int_eq( 20, i, );

		i = -1;
		($coro-restart);

	default:
		assert_fail( "unreachable instruction" );
		break;

	case -1:
		i = 1;
		--inside_test_3;
		($coro-quit test_3);
	}
	assert_fail( "unreachable instruction" );
	--inside_test_3;
[ \enter ]
	($coro-local) int i = 1;

	++inside_test_3;
[ \exit ]
	--inside_test_3;
[ )

int test_4_init( void )
{
	return ( CO_READY ); /* CO_SKIP */
}

($coro-define test_4 ]
	do {
		assert_not( inside_test_3, );
		($coro-yield);
	} while ( inside_test_3 != -1 );
[ )

int ut_coro_init( void )
{
	return ( CO_READY ); /* CO_SKIP */
}

void ut_coro_uninit( void )
{
}

($coro-define ut_coro ]
	ut_2_begin();
	($coro-yield);

	answer_last += CYCLE_COUNT;

	($semaphore-init b_empty 0);
	($semaphore-init b_full B_SIZE);

	($coro-context-init test_1);
	test_1_init();

	($coro-context-init test_2);
	test_2_init();

	($coro-wait-coro,, ($coro-call test_1) | ($coro-call test_2));
	assert_int_eq( answer_last, answer, );

	($coro-context-init test_3);
	test_3_init();

	($coro-context-init test_4);
	test_4_init();

	($coro-wait-coro,, ($coro-call test_3) | ($coro-call test_4));
[ \enter ]
	($coro-local) ($coro-context test_1);
	($coro-local) ($coro-context test_2);
	($coro-local) ($coro-context test_3);
	($coro-local) ($coro-context test_4);
[ )

/** \} */
