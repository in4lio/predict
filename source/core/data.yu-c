($!                _ _     _
     ___ ___ ___ _| |_|___| |_
    |   |  _   _|   | |  _   _|
    |  _|_| |___ ___|_|___  |
    |_|                   |_)

($import "core.yu")
($TITLE,,Application state-space representation.)

($import stdlib)
($import h)
($import "config.yu")

($implement-named)

#include "include.h"

/**
 *  \addtogroup data
 *  \{
 */

typedef int __type_t;
typedef int __length_t;
typedef int __changed_t;

/**
 *  \brief Descriptor of state variable.
 */
struct DATA_DESCRY {
	/**  Variable name */
	const char *name;
	/**  Type */
	__type_t type;
	/**  Array length */
	__length_t len;
	/**  Data pointer */
	void *data;
	/**  value-to-string function */
	void *string;
};

typedef const struct DATA_DESCRY *data_descry_t;

static char __str[ 100 ] __attribute__(( unused ));

static __inline void __set_changed( const var_t item, const __changed_t value );

($import "data-dict.yu")

/**
 *  \brief Structure of state-space.
 */
struct DATA_SPACE {
	($each-DATA_VAR \i.]
		($i VAR_TYPE) ($i DATA_VAR)($if {($i VAR_LEN) > 1} [[ ($i VAR_LEN) ]]);

	[ )
	($each-DATA_VOTED \i.]
		($i VOTED_TYPE) ($i DATA_VOTED)[ 4 ];
		byte ($i DATA_VOTED)__VALID[ 4 ];

	[ )
};

/**
 *  \brief State-space.
 */
static struct DATA_SPACE data_space;

/**
 *  \brief Descriptor of state-space.
 */
static const struct DATA_DESCRY data_descry[] = {
	($each-DATA_VAR \i.]
		($set VAR ($i DATA_VAR))
		($unfold ($i VAR_LEN) ]
			{ ($q ($VAR)), type_($upper ($i VAR_TYPE)), ($i VAR_LEN), &data_space.($VAR), ( void *) ($i VAR_STRING) },

		[ \ii.]
			{ ($q,,($VAR)_($ii)), type_($upper ($i VAR_TYPE)), ($sub ($i VAR_LEN) ($ii)), data_space.($VAR) + ($ii), ( void *) ($i VAR_STRING) },

		[ )
	[ )
	($each-DATA_VOTED \i.]
		($set VAR ($i DATA_VOTED))
		{ ($q,,($VAR))  , type_($upper ($i VOTED_TYPE)), 4, data_space.($VAR)    , ( void *) ($i VOTED_STRING) },
		{ ($q,,($VAR)_1), type_($upper ($i VOTED_TYPE)), 3, data_space.($VAR) + 1, ( void *) ($i VOTED_STRING) },
		{ ($q,,($VAR)_2), type_($upper ($i VOTED_TYPE)), 2, data_space.($VAR) + 2, ( void *) ($i VOTED_STRING) },
		{ ($q,,($VAR)_3), type_($upper ($i VOTED_TYPE)), 1, data_space.($VAR) + 3, ( void *) ($i VOTED_STRING) },
		{ ($q,,($VAR)__VALID)  , type_BYTE, 4, data_space.($VAR)__VALID    , string_byte },
		{ ($q,,($VAR)__VALID_1), type_BYTE, 3, data_space.($VAR)__VALID + 1, string_byte },
		{ ($q,,($VAR)__VALID_2), type_BYTE, 2, data_space.($VAR)__VALID + 2, string_byte },
		{ ($q,,($VAR)__VALID_3), type_BYTE, 1, data_space.($VAR)__VALID + 3, string_byte },

	[ )
	{ "none", type_COUNT, 0, NULL, string_byte }
};

($each-DATA_THREAD \i.]
	static __changed_t data_changed_($i DATA_THREAD)[ var_COUNT ];
	static __changed_t data_mask_($i DATA_THREAD)[ var_COUNT ];

[ )

/**
 *  \brief Matrix of data changes flags of variables.
 */
static __changed_t *data_changed[] = {
($each-DATA_THREAD \i.]
	data_changed_($i DATA_THREAD),

[ )
};

/**
 *  \brief Matrix of watching masks.
 */
static __changed_t *data_mask[] = {
($each-DATA_THREAD \i.]
	data_mask_($i DATA_THREAD),

[ )
};

static const char *data_type_string[] = {
($each-DATA_TYPE \i.]
	__stringify( ($i DATA_TYPE) ),

[ )
};

/**
 *  \brief value-to-string functions prototypes.
 */
($each-DATA_TYPE \i.]
typedef char *( *string_($i DATA_TYPE)_t )( char *, ($i DATA_TYPE) );

[ )

($each-DATA_TYPE \i.]
char *string_($i DATA_TYPE)( char *s, ($i DATA_TYPE) value )
{
	sprintf( s, ($i TYPE_FORMAT), value );
	return ( s );
}

[ )

($macro data_chk_thread (thread R)($do ]
	if ( ($thread) >= peek_COUNT ) {
		assert_fail( "invalid thread inx (%d)", ($thread) );
		return ($R);
	}
[ ))

($macro data_chk_var (item op R)($do ]
	if ( ($item) >= var_COUNT ) {
		assert_fail( "attempt to %s var with invalid inx (%d)", ($op), ($item) );
		return ($R);
	}
[ ))

($macro data_chk_type (item T op R)($do ]
	if ( data_descry[ ($item) ].type != type_($upper ($T)) ) {
		assert_fail( "attempt to %s \"%s\" (%d) as %s while it's %s"
		, ($op)
		, data_descry[ ($item) ].name
		, ($item)
		, data_type_string[ type_($upper ($T)) ]
		, data_type_string[ data_descry[ ($item) ].type ]
		);
		return ($R);
	}
[ ))

static __inline void data_lock( void )
{
	if ( data_lock_callback ) data_lock_callback();
}

static __inline void data_unlock( void )
{
	if ( data_unlock_callback ) data_unlock_callback();
}

($each-DATA_TYPE \i.]

($set T ($i DATA_TYPE))
($T) data_get_($T)( const var_t item )
{
	($T) result;
	($data_chk_var item "get" 0);
	($data_chk_type item ($T) "get" 0);
	data_lock();
	result = *(( ($T) *) data_descry[ item ].data );
	data_unlock();
	return ( result );
}

char *data_get_string_($T)( char *s, const var_t item )
{
	char *result;
	($data_chk_var item "get" NULL);
	($data_chk_type item ($T) "get" NULL);
	data_lock();
	result = (( string_($T)_t ) data_descry[ item ].string )( s, *(( ($T) *) data_descry[ item ].data ));
	data_unlock();
	return ( result );
}

void data_set_($T)( const var_t item, ($T) value )
{
	($data_chk_var item "set" []);
	($data_chk_type item ($T) "set" []);
	data_descry_t d = data_descry + item;
	($T) *var = ( ($T) *) d->data;
	data_lock();
	if ( *var != value ) {
		*var = value;
		__set_changed( item, 1 );
		if ( ini_data_prot ) {
			if ((( *ini_data_prot_filter == '\0' )
			|| ( strstr( d->name, ini_data_prot_filter ) != 0 ))
			&& (( *ini_data_prot_filter_skip == '\0' )
			|| ( strstr( d->name, ini_data_prot_filter_skip ) == 0 ))) {
				printf( __CRLF__"\t" );
				printf( clock_stamp( NULL, __str ));
				printf( "   %-22s  %s"
				, d->name
				, (( string_($T)_t ) d->string )( __str, *var )
				);
			}
		}
	}
	data_unlock();
}

[ )

char *data_get_string( char *s, const var_t item )
{
	switch ( data_descry[ item ].type ) {
	($each-DATA_TYPE \i.]
		case type_($upper ($i DATA_TYPE)):
			return data_get_string_($i DATA_TYPE)( s, item );

	[ )
	default:
		return "?";
	}
}

void data_set_string( const var_t item, const char *s )
{
	char *end;

	switch ( data_descry[ item ].type ) {
	($each-DATA_TYPE \i.]

		($set T ($i DATA_TYPE))
		case type_($upper ($T)):
			do {
				($T) val = ( ($T) ) ($i TYPE_STRTO)( s, &end );
				if ( *end == '\0' ) {
					data_set_($T)( item, val );
				} else {
					assert_fail( "attempt to set invalid \"%s\" %s value (%s)"
					, data_descry[ item ].name
					, data_type_string[ type_($upper ($T)) ]
					, s
					);
				}
			} while ( 0 );
			return;

	[ )
	}
}

void data_set( const var_t item, void *value )
{
	switch ( data_descry[ item ].type ) {
	($each-DATA_TYPE \i.]
		case type_($upper ($i DATA_TYPE)):
			data_set_($i DATA_TYPE)( item, *( ($i DATA_TYPE) *) value );
			break;

	[ )
	}
}

($each-DATA_TYPE \i.]

($set T ($i DATA_TYPE))
void voted_set_($T)( const var_t item, byte h, ($T) value, bool ( *voter )( ($T) *, bool, ($T), bool, ($T), bool, ($T) ))
{
	($T) result = data_get_($T)( item );

	if (( h < 1 ) || ( h > 3 )) {
		assert_fail( "attempt to set invalid \"%s\" channel (%d)"
		, data_descry[ item ].name
		, h
		);
		return;
	}
	if ( data_get_byte( item + h + 4 ) == 0 ) {
		  data_set_byte( item + h + 4, 1 );
	} else {
		if ( value == data_get_($T)( item + h ))
			/* Nothing changed */
			return;
	}
	data_set_($T)( item + h, value );

	if ( voter( &result
	, data_get_byte( item + 5 ), data_get_($T)( item + 1 )
	, data_get_byte( item + 6 ), data_get_($T)( item + 2 )
	, data_get_byte( item + 7 ), data_get_($T)( item + 3 ))
	) {
		data_set_($T)( item, result );
		if ( !data_get_byte( item + 4 )) {
			  data_set_byte( item + 4, 1 );
			  data_set_changed( item );
		}
	} else {
		/* Invalid voted */
		if ( data_get_byte( item + 4 )) {
			 data_set_byte( item + 4, 0 );
			 data_set_changed( item );
		}
	}
}

void joint_set_($T)( const var_t item, ($T) value )
{
	data_set_byte( item + 4,     1 );
	data_set_byte( item + 4 + 1, 1 );
	data_set_byte( item + 4 + 2, 1 );
	data_set_byte( item + 4 + 3, 1 );
	data_set_($T)( item, value );
	data_set_($T)( item + 1, value );
	data_set_($T)( item + 2, value );
	data_set_($T)( item + 3, value );
}

[ )

static __inline void __set_changed( const var_t item, const __changed_t value )
{
	thread_t i;

	for ( i = 0; i < peek_COUNT; i++ ) {
		if ( data_mask[ i ][ item ]) data_changed[ i ][ item ] = value;
	}
}

void data_set_changed( const var_t item )
{
	($data_chk_var item "set change of" []);
	data_lock();
	__set_changed( item, 1 );
	data_unlock();
}

void data_reset_changed( const var_t item )
{
	($data_chk_var item "reset change of" []);
	data_lock();
	__set_changed( item, 0 );
	data_unlock();
}

void data_set_all_changed( const thread_t thread )
{
	var_t i;

	($data_chk_thread thread []);
	data_lock();
	for ( i = 0; i < var_COUNT; i++ ) {
		if ( data_mask[ thread ][ i ]) data_changed[ thread ][ i ] = 1;
	}
	data_unlock();
}

int data_get_changed( const thread_t thread, const var_t item )
{
	int result;

	($data_chk_thread thread 0);
	($data_chk_var item "get change of" 0);
	data_lock();
	result = (( int ) data_changed[ thread ][ item ]);
	data_unlock();

	return ( result );
}

int data_get_changed_any( const thread_t thread )
{
	var_t i;

	($data_chk_thread thread 0);
	data_lock();
	for ( i = 0; i < var_COUNT; i++ ) {
		if ( data_changed[ thread ][ i ]) {
			data_unlock();

			return ( 1 );
		}
	}
	data_unlock();

	return ( 0 );
}

void data_watch( const thread_t thread, const var_t *vars )
{
	($data_chk_thread thread []);
	data_lock();
	while ( *vars < var_COUNT ) data_mask[ thread ][ *vars++ ] = 1;
	data_unlock();
}

void data_watch_array( const thread_t thread, const var_t *vars )
{
	($data_chk_thread thread []);
	data_lock();
	while ( *vars < var_COUNT ) {
		var_t i;

		for ( i = *vars + data_descry[ *vars ].len - 1; i >= *vars; i-- ) {
			data_mask[ thread ][ i ] = 1;
		}
		++vars;
	}
	data_unlock();
}

void data_clear_watch( const thread_t thread )
{
	var_t i;

	($data_chk_thread thread []);
	data_lock();
	for ( i = 0; i < var_COUNT; i++ ) {
		data_mask[ thread ][ i ] = 0;
		data_changed[ thread ][ i ] = 0;
	}
	data_unlock();
}

void data_reset( const thread_t thread, const var_t item )
{
	($data_chk_thread thread []);
	($data_chk_var item "set change of" []);
	data_lock();
	data_changed[ thread ][ item ] = 0;
	data_unlock();
}

void data_reset_all( const thread_t thread )
{
	var_t i;

	($data_chk_thread thread []);
	data_lock();
	for ( i = 0; i < var_COUNT; i++ ) data_changed[ thread ][ i ] = 0;
	data_unlock();
}

bool voted_valid( const var_t item )
{
	return ( data_get_byte( item + 4 ));
}

var_t data_atovar( const char *s )
{
	var_t i;

	for ( i = 0; i < var_COUNT; i++ ) {
		if ( strcmp( data_descry[ i ].name, s ) == 0 ) return ( i );
	}
	return ( var_COUNT );
}

char *data_vartoa( const var_t item )
{
	($data_chk_var item "get name of" "");

	return (( char *) data_descry[ item ].name );
}

char *data_get_type( const var_t item )
{
	($data_chk_var item "get type of" "");

	return (( char *) data_type_string[ data_descry[ item ].type ]);
}

/** \} */
