($!                _ _     _
     ___ ___ ___ _| |_|___| |_
    |   |  _   _|   | |  _   _|
    |  _|_| |___ ___|_|___  |
    |_|                   |_)

($import "core.yu")
($TITLE,,Coroutines and unit tests declarations.)

($import stdlib)
($import h)
($import corolib)
($import "config.yu")

($h-begin-named)

($extern-c-begin)

($coro-h)

/**
 *  \defgroup coro Coroutines.
 *  \ingroup core
 *  \{
 */

($import "co-dict.yu")

($DOC__CORO)

($each-CORO \i.]
	($set C ($i CORO))
	/** ($q C) coroutine local context. */
	($h-extern-init,,($coro-context ($C)),,NULL)
	/** ($q C) coroutine alive flag. */
	($h-extern-init,,int ($C)_alive,,CO_SKIP)
	/** ($q C) coroutine. */
	extern ($coro-declare ($C));
	/** Initialize ($q C) coroutine. */
	extern int ($C)_init( void );
	/** Uninitialize ($q C) coroutine. */
	extern void ($C)_uninit( void );

[ )

/** \} */

#ifdef LINK_UT

/**
 *  \addtogroup ut
 *  \{
 */

/**
 * \brief Restart unit testing of 2nd stage.
 */
extern void ut_2_restart( void );

($import "ut-dict.yu")

($each-UT_1 \i.]
	/** ($q,,ut_($i UT_1)) unit test of 1st stage. */
	extern void ut_($i UT_1)( void );

[ )

/** \} */

#endif /* LINK_UT */

($extern-c-end)

($h-end)
