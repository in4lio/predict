($! coroutine-h.yu - a wrapper for coroutine.h )

($!
	($coro-context A);
	($coro-context B);

	($coro-define A ]
		for ( ; ; ) {
			/* ... */
			($coro-yield);
		}
	[ )

	($coro-define B ]
		for ( ; ; ) {
			/* ... */
			($coro-wait cond);
		}
	[ \enter ]
		($coro-local) int b;
	[ )

	int main( void )
	{
		for ( ; ; ) {
			($coro-call A);
			($coro-call B);
		}
		return 0;
	}
)

($import stdlib)

($macro coro-h ()#include "coroutine.h")

($macro coro-context (name) CORO_CONTEXT( ($name) ))

($macro coro-context-init (name) CORO_CONTEXT_INIT( ($name) ))

($macro coro-declare (name) CORO_DEFINE( ($name) ))

($set coro-define \name.\exit..\coro.\enter:[].\exit:[].]
($coro-declare ($name))
{
	($enter)

	CORO_BEGIN();
	/* begin */
	($coro exit)
	/* end */
	CORO_END(($exit));
}
[\set )

($macro coro-local () CORO_LOCAL)

($macro coro-yield () CORO_YIELD(($&exit)))

($macro coro-wait (cond) CORO_WAIT(($cond),($&exit)))

($macro coro-restart () CORO_RESTART(($&exit)))

($macro coro-quit () CORO_QUIT(($&exit)))

($macro coro-call (name) CORO_CALL( ($name) ))

($macro coro-alive (coro) CORO_ALIVE( ($coro) ))

($macro coro-wait-coro (cond) CORO_WAIT_CORO(($cond),($&exit)))

($macro semaphore-init (name val) SEMAPHORE_INIT( ($name), ($val) ))

($macro semaphore-acquire (name) SEMAPHORE_ACQUIRE( ($name),($&exit)))

($macro semaphore-release (name) SEMAPHORE_RELEASE( ($name) ))
